<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <!--
    El "parent" establece un conjunto de propiedades y dependencias predefinidas
    para el proyecto, gestionando las versiones y la compatibilidad de forma centralizada.
    Esto te ahorra tener que definir las versiones de muchas librerías de Spring Boot.
    -->
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.2.5</version>
        <relativePath/> <!-- Busca el padre en el repositorio de Maven -->
    </parent>

    <!-- Información básica del proyecto -->
    <groupId>com.group</groupId>
    <artifactId>artifact</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>name</name>
    <description>Descripción del proyecto</description>

    <!--
    Propiedades globales que se pueden reutilizar en todo el POM.
    Esto facilita la gestión de versiones y permite cambiar la versión
    de una dependencia en un solo lugar.
    -->
    <properties>
        <java.version>17</java.version>
        <org.mapstruct.version>1.5.5.Final</org.mapstruct.version>
        <lombok.version>1.18.32</lombok.version>
        <webmvc-ui.version>2.5.0</webmvc-ui.version>
        <jacoco.version>0.8.12</jacoco.version>
        <spring-cloud.version>2023.0.3</spring-cloud.version>
    </properties>

    <!--
    Sección de dependencias. Aquí se listan las bibliotecas y módulos
    necesarios para que la aplicación funcione.
    -->
    <dependencies>
        <!-- ==================== Dependencias Web, API y Persistencia ==================== -->

        <!-- Habilita la creación de aplicaciones web, incluyendo un servidor web embebido (Tomcat). -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <scope>compile</scope>
        </dependency>

        <!-- Jackson se encarga de convertir objetos Java a JSON y viceversa. Es esencial para las APIs RESTful. -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
        </dependency>

        <!-- Proporciona soporte para la validación de datos de entrada. -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
            <scope>compile</scope>
        </dependency>

        <!--
        Ofrece endpoints para monitorear la aplicación en producción (salud, métricas, etc.).
        Es esencial para la observabilidad.
        -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
            <scope>compile</scope>
        </dependency>

        <!-- Habilita la interacción con bases de datos relacionales usando JPA y Hibernate. -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
            <scope>compile</scope>
        </dependency>

        <!-- Base de datos en memoria, ideal para desarrollo y pruebas. -->
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <scope>runtime</scope>
        </dependency>

        <!-- ==================== Herramientas de Desarrollo y Utilidades ==================== -->

        <!--
        Lombok: reduce el código repetitivo al generar getters, setters,
        constructores, etc. a través de anotaciones. El `optional`
        indica que es una dependencia de desarrollo, no de producción.
        -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>

        <!-- MapStruct: generador de código para mappers de Java. -->
        <dependency>
            <groupId>org.mapstruct</groupId>
            <artifactId>mapstruct</artifactId>
            <version>${org.mapstruct.version}</version>
        </dependency>

        <!-- Proporciona herramientas útiles para el desarrollo, como la recarga en caliente. -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
            <optional>true</optional>
        </dependency>

        <!-- ==================== Documentación y Microservicios ==================== -->

        <!--
        Genera la documentación de la API (Swagger UI) a partir del código.
        Facilita la exploración y prueba de los endpoints.
        -->
        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
            <version>${webmvc-ui.version}</version>
        </dependency>

        <!-- Permite construir APIs que siguen el principio HATEOAS. -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-hateoas</artifactId>
        </dependency>

        <!-- Habilita el registro del servicio en un servidor Eureka. -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
        </dependency>

        <!-- ==================== Dependencias de Pruebas ==================== -->

        <!--
        Incluye librerías para pruebas unitarias y de integración (JUnit, Mockito).
        El scope `test` asegura que solo se usen durante la fase de pruebas.
        -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- Permite generar documentación de la API directamente desde las pruebas. -->
        <dependency>
            <groupId>org.springframework.restdocs</groupId>
            <artifactId>spring-restdocs-mockmvc</artifactId>
            <scope>test</scope>
        </dependency>

    </dependencies>

    <!--
    Gestión de dependencias para asegurar la compatibilidad entre
    los módulos de Spring Cloud.
    -->
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <!--
    Sección de plugins. Los plugins ejecutan tareas específicas durante
    el ciclo de vida del proyecto (ej. compilación, empaquetado, pruebas).
    -->
    <build>
        <plugins>
            <!--
            Plugin principal para la compilación. Se configura para habilitar
            los procesadores de anotaciones de Lombok y MapStruct.
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.13.0</version>
                <configuration>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                    <!--
                    Lista de procesadores de anotaciones. El orden es importante:
                    Lombok debe procesarse primero para generar los métodos
                    antes de que MapStruct intente usarlos.
                    -->
                    <annotationProcessorPaths>
                        <path>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                            <version>${lombok.version}</version>
                        </path>
                        <path>
                            <groupId>org.mapstruct</groupId>
                            <artifactId>mapstruct-processor</artifactId>
                            <version>${org.mapstruct.version}</version>
                        </path>
                        <!--
                        Este binding es crucial para la integración fluida entre
                        Lombok y MapStruct.
                        -->
                        <path>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok-mapstruct-binding</artifactId>
                            <version>0.2.0</version>
                        </path>
                    </annotationProcessorPaths>
                </configuration>
            </plugin>

            <!--
            Plugin para medir la cobertura de código. Se configura para
            ejecutar el agente durante la fase de preparación y generar
            el informe en la fase de prueba.
            -->
            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>${jacoco.version}</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>report</id>
                        <phase>test</phase>
                        <goals>
                            <goal>report</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!--
            Plugin de Spring Boot que empaqueta la aplicación como un JAR
            ejecutable.
            -->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
</project>
